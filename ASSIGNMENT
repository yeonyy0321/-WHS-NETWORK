#include <stdlib.h>
#include <stdio.h>
#include <pcap.h>
#include <arpa/inet.h>
#include "myheader.h" // myheader.h 파일을 포함합니다.

void got_packet(u_char *args, const struct pcap_pkthdr *header, const u_char *packet)
{
    struct ethheader *eth = (struct ethheader *)packet;

    if (ntohs(eth->ether_type) == 0x0800) { // 0x0800 is IP type
        struct ipheader *ip = (struct ipheader *)(packet + sizeof(struct ethheader));

        if (ip->iph_protocol == IPPROTO_TCP) { // Check if it's a TCP packet
            // Calculate IP header length
            int ip_header_len = ip->iph_ihl * 4;
            struct tcpheader *tcp = (struct tcpheader *)(packet + sizeof(struct ethheader) + ip_header_len);

            printf("Source MAC: ");
            for (int i = 0; i < 6; i++) {
                printf("%02x", eth->ether_shost[i]);
                if (i < 5) {
                    printf(":");
                }
            }
            printf("\n");

            printf("Destination MAC: ");
            for (int i = 0; i < 6; i++) {
                printf("%02x", eth->ether_dhost[i]);
                if (i < 5) {
                    printf(":");
                }
            }
            printf("\n");

            printf("Source IP: %s\n", inet_ntoa(ip->iph_sourceip));
            printf("Destination IP: %s\n", inet_ntoa(ip->iph_destip));

            printf("Source Port: %u\n", ntohs(tcp->tcp_sport));
            printf("Destination Port: %u\n", ntohs(tcp->tcp_dport));

            // Extract and print part of the TCP payload (message)
            int tcp_header_len = TH_OFF(tcp) * 4;
            int payload_len = ntohs(ip->iph_len) - ip_header_len - tcp_header_len;
            if (payload_len > 0) {
                printf("Message: ");
                int max_print_len = 50; // Print up to 50 characters of the message
                int print_len = payload_len < max_print_len ? payload_len : max_print_len;
                for (int i = 0; i < print_len; i++) {
                    printf("%c", packet[ip_header_len + tcp_header_len + i]);
                }
                if (payload_len > max_print_len) {
                    printf("...");
                }
                printf("\n");
            }
        }
    }
}

int main()
{
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];
    struct bpf_program fp;
    char filter_exp[] = "tcp"; // Capture only TCP packets
    bpf_u_int32 net;

    // Step 1: Open live pcap session on NIC with name ens33
    handle = pcap_open_live("ens33", BUFSIZ, 1, 1000, errbuf);

    // Step 2: Compile filter_exp into BPF psuedo-code
    pcap_compile(handle, &fp, filter_exp, 0, net);
    if (pcap_setfilter(handle, &fp) != 0) {
        pcap_perror(handle, "Error:");
        exit(EXIT_FAILURE);
    }

    // Step 3: Capture packets
    pcap_loop(handle, -1, got_packet, NULL);

    pcap_close(handle); // Close the handle
    return 0;
}
